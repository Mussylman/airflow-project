from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.models import Variable
from datetime import datetime
import pendulum
import logging
from helpers.telegram_loggerr import create_telegram_logger

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup
import time
import re

# üåê –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ê–ª–º–∞—Ç—ã
local_tz = pendulum.timezone("Asia/Almaty")

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
BOT_TOKEN = Variable.get("konyrat_bot_token")
CHAT_ID = Variable.get("konyrat_bot_chat_id")
logger = create_telegram_logger(BOT_TOKEN, CHAT_ID)

def parse_qoldau():
    options = Options()
    options.add_argument('--headless=new')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É selenium (–≤ docker-—Å–µ—Ä–≤–∏—Å–µ selenium)
    driver = webdriver.Remote(
        command_executor='http://selenium:4444/wd/hub',
        options=options
    )

    driver.get("https://cgr.qoldau.kz/ru/start")
    time.sleep(5)
    html = driver.page_source
    driver.quit()

    soup = BeautifulSoup(html, "html.parser")

    target_title = "–ù—É—Ä –ñ–æ–ª—ã - –•–æ—Ä–≥–æ—Å"
    title_blocks = soup.select(".col-md-4.font-14.square-chart-name")
    square_blocks = soup.select(".col-md-8.square-chart-container")

    target_index = next(
        (idx for idx, block in enumerate(title_blocks) if block.text.strip() == target_title),
        -1
    )

    if target_index == -1 or target_index >= len(square_blocks):
        logger.error("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '–ù—É—Ä –ñ–æ–ª—ã - –•–æ—Ä–≥–æ—Å' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    squares = square_blocks[target_index].select(".square")
    result = []

    for sq in squares:
        tooltip = sq.get("data-original-title", "")
        if not tooltip:
            continue

        text = re.sub(r"<[^>]+>", "", tooltip).strip()

        if "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å" in text:
            date_match = re.search(r"(\d+ \w+)", text)
            result.append({
                "–¥–∞—Ç–∞": date_match.group(1) if date_match else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "–í—ã—Ö–æ–¥–Ω–æ–π": True,
                "–ú—Ä–ø 1": None,
                "–ú—Ä–ø 100": None
            })
            continue

        date_match = re.search(r"–°–≤–æ–±–æ–¥–Ω–æ –Ω–∞ (\d+ \w+)", text)
        m1_match = re.search(r"–∑–∞ 1 –ú–†–ü: (\d+)", text)
        m100_match = re.search(r"–∑–∞ 100 –ú–†–ü: (\d+)", text)

        result.append({
            "–¥–∞—Ç–∞": date_match.group(1) if date_match else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "–í—ã—Ö–æ–¥–Ω–æ–π": False,
            "–ú—Ä–ø 1": int(m1_match.group(1)) if m1_match else None,
            "–ú—Ä–ø 100": int(m100_match.group(1)) if m100_match else None
        })

    # üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered_result = []
    for entry in result:
        if not entry["–í—ã—Ö–æ–¥–Ω–æ–π"] and (entry["–ú—Ä–ø 1"] is None or entry["–ú—Ä–ø 1"] == 0):
            continue

        filtered_result.append({
            "–¥–∞—Ç–∞": entry["–¥–∞—Ç–∞"],
            "–í—ã—Ö–æ–¥–Ω–æ–π": entry["–í—ã—Ö–æ–¥–Ω–æ–π"],
            "–ú—Ä–ø 1": entry["–ú—Ä–ø 1"]
        })

    if not filtered_result:
        logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # ‚úâÔ∏è –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_lines = [f"üõ£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {target_title}"]
    for entry in filtered_result:
        if entry["–í—ã—Ö–æ–¥–Ω–æ–π"]:
            message_lines.append(f"{entry['–¥–∞—Ç–∞']} ‚Äî –í—ã—Ö–æ–¥–Ω–æ–π")
        elif entry["–ú—Ä–ø 1"] is not None:
            message_lines.append(f"{entry['–¥–∞—Ç–∞']} ‚Äî –∑–∞ 1 –ú–†–ü: {entry['–ú—Ä–ø 1']}")

    message = "\n".join(message_lines)
    logger.info(message)

# üïí DAG
with DAG(
    dag_id="konyrat_parse_and_send",
    schedule_interval="0 * * * *",  # –∫–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞
    start_date=datetime(2025, 1, 1, tzinfo=local_tz),
    catchup=False,
    access_control={
        "Admin": {"can_read", "can_edit"},
        # —Ç–æ–ª—å–∫–æ —Ä–æ–ª—å "Admin" —Å–º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º DAG
    },
    tags=["qoldau", "parser"]
) as dag:

    parse_task = PythonOperator(
        task_id="parse_and_send",
        python_callable=parse_qoldau
    )
